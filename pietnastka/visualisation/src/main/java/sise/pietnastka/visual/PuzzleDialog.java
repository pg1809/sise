/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sise.pietnastka.visual;

import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import javax.swing.Timer;
import sise.pietnastka.solver.Move;
import sise.pietnastka.solver.PuzzleNode;
import sise.pietnastka.solver.Solution;

/**
 *
 * @author PiotrGrzelak
 */
public class PuzzleDialog extends javax.swing.JDialog {

    private static final int TIMER_DELAY = 600;
    
    private Solution solution;
    
    private TilePanel[][] boardView;
    
    private Timer timer;
    
    private int moveProcessed = 0;
    
    private PuzzleNode node;
    
    /**
     * Creates new form PuzzleDialog
     */
    public PuzzleDialog(Frame parent, Solution solution) {
        super(parent, false);
        initComponents();
        
        this.solution = solution;
        this.node = solution.getNode();
        
        int rows = solution.getPuzzleRowsNum();
        int columns = solution.getPuzzleColumnsNum();
        
        this.setSize(rows * TilePanel.TILE_WIDTH, columns * TilePanel.TILE_HEIGHT);
        boardView = new TilePanel[rows][columns];
        
        GridLayout gridLayout = new GridLayout(rows, columns);
        this.setLayout(gridLayout);
        for (int i = 0; i < boardView.length; ++i) {
            for (int j = 0; j < boardView[0].length; ++j) {
                boardView[i][j] = new TilePanel();
                this.add(boardView[i][j]);
            }
        }
        //fillBoardView();
        
        timer = new Timer(TIMER_DELAY, (ActionEvent e) -> timeElapsed());
    }

    public void startSimulation() {
        fillBoardView();
        timer.start();
    }
    
    private void timeElapsed() {
        if (moveProcessed < solution.getMovesNum()) {
            Move move = solution.getMoves().get(moveProcessed);
            move.execute(node);
            fillBoardView();
            moveProcessed++;
        }
    }
    
    private void fillBoardView() {
        for (int i = 0; i < boardView.length; ++i) {
            for (int j = 0; j < boardView[0].length; ++j) {
                boardView[i][j].setNumber(node.getCell(i, j));
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
